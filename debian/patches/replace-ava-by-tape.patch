Description: replace ava by tape
Author: Yadd <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2021-11-05

--- a/test.js
+++ b/test.js
@@ -1,14 +1,15 @@
-import test from 'ava';
-import fn from './';
-import domain from 'domain';
+const test = require('tape');
+const fn = require('./');
+const domain = require('domain');
 
-test('undefined === null', t => t.is(fn(undefined), null));
+test('undefined === null', t => {t.is(fn(undefined), null);t.end();});
 
 test('fn === fn.toString()', t => {
 	function toStr() {
 		return 'foo';
 	}
 	t.ok(/function toStr\(\) {[\s\n]+return 'foo'/m.test(fn(toStr)));
+	t.end();
 });
 
 test('Buffer outputs hex representation', t => {
@@ -22,22 +23,25 @@
 		'14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27',
 		'28 29 2a 2b 2c 2d 2e 2f 30 31'
 	].join('\n'));
+	t.end();
 });
 
-test('regExp === regExp.toString()', t => t.is(fn(/foo|bar/), '/foo|bar/'));
+test('regExp === regExp.toString()', t => {t.is(fn(/foo|bar/), '/foo|bar/');t.end();});
 
 test('Array holes are filled', t => {
 	const array = ['a'];
 	array[4] = 'c';
 	t.same(fn(array), ['a', null, null, null, 'c']);
+	t.end();
 });
 
 test('Arrays with a single float are safe', t => {
 	const array = [1.5];
 	t.same(fn(array), [1.5]);
+	t.end();
 });
 
-test.cb('Errors have their domain stripped', t => {
+test('Errors have their domain stripped', t => {
 	t.plan(2);
 
 	// These two extra properties show up in Node `0.10`
@@ -50,7 +54,6 @@
 				['domain', 'domainThrown', 'message', 'stack']
 			);
 			t.same(Object.keys(fn(e, filter)).sort(), ['message', 'name', 'stack']);
-			t.end();
 		})
 		.run(() => {
 			setTimeout(() => {
@@ -65,6 +68,7 @@
 	t.not(x.indexOf('name'), -1, `name should be exposed even though it's on the prototype`);
 	t.not(x.indexOf('stack'), -1);
 	t.not(x.indexOf('message'), -1);
+	t.end();
 });
 
 test('should destroy circular references', t => {
@@ -74,6 +78,7 @@
 	const serialized = fn(obj);
 	t.is(typeof serialized, 'object');
 	t.is(serialized.child.parent, '[Circular]');
+	t.end();
 });
 
 test('should not affect the original object', t => {
@@ -83,9 +88,11 @@
 	const serialized = fn(obj);
 	t.not(serialized, obj);
 	t.is(obj.child.parent, obj);
+	t.end();
 });
 
 test('should only destroy parent references', t => {
+    t.plan(4);
 	const obj = {};
 	const common = {thing: obj};
 	obj.one = {firstThing: common};
@@ -102,6 +109,7 @@
 	const obj = {};
 	obj.parent = obj;
 	t.same(fn(obj), {parent: '[Circular]'});
+	t.end();
 });
 
 test('should work on arrays', t => {
@@ -119,6 +127,7 @@
 	t.is(serialized.b.y[0][0], 'test');
 	t.is(serialized.b.y[1][0], '[Circular]');
 	t.is(serialized.b.y[0][1], '[Circular]');
+	t.end();
 });
 
 test('custom filter', t => {
@@ -126,4 +135,5 @@
 		fn({a: 'a', b: 'b', c: 'c'}, k => k === 'c'),
 		{c: 'c'}
 	);
+	t.end();
 });
